#include "pch.h"
#include "Player.h"

#include "GameManager.h"


Player::Player(int x, int y) : Object(x, y)
, m_Data{
		{ ' ', ' ', ' ', ' ', ' ' },
		{ ' ', 'P', 'P', 'P', ' ' },
		{ ' ', 'P', ' ', 'P', ' ' },
		{ ' ', 'P', 'P', 'P', ' ' },
		{ ' ', ' ', ' ', ' ', ' ' } }
{
	m_pNowAni = &m_Data;

	rt.x += 1;
	rt.y += 1;
	rt.w = TileSize - 2;
	rt.h = TileSize - 2;
	// Rect 객체 데이터 초기화
}

Player::~Player()
{
	m_refStat = nullptr;
}

eObjectType Player::GetObjectType() const
{
	return eObjectType::Player;
}

Rect Player::GetRendertRect() const
{
	return Rect{ rt.x -1, rt.y - 1, rt.w, rt.h };
}

void Player::SetStat(struct CharacterData* a_pStat)
{
	m_refStat = a_pStat;
	m_nPutBombCount = 0; 
	// 아규먼트 값의 스텟으로 자신 스텟 초기화
	// 생성 직후 폭탄카운트는 당연히 0
}

bool Player::_Update(float a_fDelta)
{
	Move(a_fDelta);
	BombCheck();
	
	return false;
}

void Player::Move(float a_fDeltaTime)
{
	float fAdd = a_fDeltaTime * (m_refStat->fMoveSeepd);
 	// 속도의 양 델타타임 곱함으로써 업데이트 주기와 상관없는 속력이 나옴
 	
	float fX = 0; // vector2 . X
	float fY = 0; // vector2 . Y

	if (IsKeyDown(eKey::A)) { fX -= fAdd; }
	if (IsKeyDown(eKey::D)) { fX += fAdd; }

	if (IsKeyDown(eKey::S)) { fY += fAdd; }
	if (IsKeyDown(eKey::W)) { fY -= fAdd; }

	rt.x += fX;
	rt.y += fY;
	 // 좌표 갱신
}

void Player::BombCheck()
{
	if(m_nPutBombCount >= m_refStat->nBombCount)  { return; }
 		// 내가 맵에설치한 폭탄이 내가 설치할수있는 폭탄의 개수를 넘었다면 설치불가능
	if (IsKeyDown(eKey::Space))
	{
		COORD c = rt.Center(); // 자신의 좌표에 폭탄설치
		if( GameMng()->AddBomb(c.X, c.Y) == true )
		{
			++m_nPutBombCount; //
		}
	}
}
